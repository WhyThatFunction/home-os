## @param kubeVersion Override Kubernetes version
##
kubeVersion: ""
## @param nameOverride String to partially override common.names.fullname template (will maintain the release name)
##
nameOverride: ""
## @param fullnameOverride String to fully override common.names.fullname template
##
fullnameOverride: ""
## @param commonLabels Labels to add to all deployed resources
##
commonLabels: { }

commonAnnotations:
  "kubernetes.io/description": 'Home ({{ include "common.names.fullname" $ }} / monitoring)'

#  headscale:
#    enabled: true
#    password: '{{ .Values.global.pg.pw }}'
#    host: '{{ .Values.global.pg.host }}'
#    user: '{{ .Values.global.pg.user }}'
#    database: headscale
#    port: 5432
#  keycloak:
#    enabled: true
#    password: '{{ .Values.global.pg.pw }}'
#    host: '{{ .Values.global.pg.host }}'
#    user: '{{ .Values.global.pg.user }}'
#    database: keycloak
#    port: 5432
#  litellm:
#    enabled: true
#    password: '{{ .Values.global.pg.pw }}'
#    host: '{{ .Values.global.pg.host }}'
#    user: '{{ .Values.global.pg.user }}'
#    database: litellm
#    port: 5432
postgresql: { }

meta:
  enabled: false

loki:
  enabled: false
  fullnameOverride: loki
  global:
    extraEnvFrom:
      - secretRef:
          name: "minio"
  
  memcachedExporter:
    enabled: false
  resultsCache:
    enabled: false
  chunksCache:
    enabled: false
  memberlist:
    service:
      publishNotReadyAddresses: true
  indexGateway:
    joinMemberlist: false
  ingress:
    enabled: true
    annotations:
      cert-manager.io/cluster-issuer: self-signed-ca
    ingressClassName: traefik
    hosts:
      - "loki.home.ssegning"
    tls:
      - secretName: "loki-tls"
        hosts:
          - "loki.home.ssegning"
  loki:
    auth_enabled: false
    storage:
      type: s3
      bucketNames:
        chunks: monitoring-loki-chunks
        ruler: monitoring-loki-ruler
      object_store:
        storage_prefix: "loki_"
      s3:
        s3ForcePathStyle: true
        insecure: true
    structuredConfig:
      common:
        storage:
          s3:
            endpoint: "s3-minio.s3.svc.cluster.local:9000"
            access_key_id: "${rootUser}"
            secret_access_key: "${rootPassword}"
            insecure: true
      compactor:
        retention_enabled: true
        delete_request_store: s3
      limits_config:
        retention_period: 30d

    commonConfig:
      replication_factor: 1
    schemaConfig:
      configs:
        - from: "2024-04-01"
          store: tsdb
          object_store: s3
          schema: v13
          index:
            prefix: loki_index_
            period: 24h
    pattern_ingester:
      enabled: true
    limits_config:
      allow_structured_metadata: true
      volume_enabled: true
  ruler:
    enable_api: true
  lokiCanary:
    enabled: false
  test:
    enabled: false
  monitoring:
    dashboards:
      enabled: false
    rules:
      enabled: false
    serviceMonitor:
      enabled: false
    selfMonitoring:
      enabled: false
      grafanaAgent:
        installOperator: false
    lokiCanary:
      enabled: false

  minio:
    enabled: false

  deploymentMode: SingleBinary

  singleBinary:
    autoscaling:
      # -- Enable autoscaling
      enabled: true
      # -- Minimum autoscaling replicas for the single binary
      minReplicas: 1
      # -- Maximum autoscaling replicas for the single binary
      maxReplicas: 3
      # -- Target CPU utilisation percentage for the single binary
      targetCPUUtilizationPercentage: 90
      # -- Target memory utilisation percentage for the single binary
      targetMemoryUtilizationPercentage: 90
    # -- Resource requests and limits for the single binary
    resources:
      requests:
        cpu: '100m'
        memory: '600Mi'
      limits:
        cpu: '1000m'
        memory: '4Gi'
    extraArgs:
      - "-config.expand-env=true"
    extraEnvFrom:
      - secretRef:
          name: "minio"
    persistence:
      storageClass: longhorn

tempo:
  enabled: true
  fullnameOverride: tempo
  
  tempo:
    reportingEnabled: false
    extraArgs:
      "config.expand-env": "true"
    extraEnvFrom:
      - secretRef:
          name: "minio"
    metricsGenerator:
      enabled: true
      remoteWriteUrl: "http://mtor-prometheus:9090/api/v1/write"
    resources:
      requests:
        cpu: 100m
        memory: 2Gi
      limits:
        cpu: 500m
        memory: 3Gi
    overrides:
      defaults:
        #memberlist:
        #  cluster_label: "tempo-monitoring"
        metrics_generator:
          processors:
            - service-graphs
            - span-metrics
    storage:
      trace:
        backend: s3
        s3:
          bucket: "monitoring-tempo" # store traces in this bucket
          endpoint: "s3-minio.s3.svc.cluster.local:9000"
          access_key: "${rootUser}"
          secret_key: "${rootPassword}"
          insecure: true

prom-stack:
  enabled: false
  fullnameOverride: mtor
  
  crds:
    upgradeJob:
      enabled: true
  
  grafana:
    enabled: true
    resources:
      requests:
        cpu: '500m'
        memory: '1Gi'
      limits:
        cpu: '1000m'
        memory: '2Gi'
    ingress:
      enabled: true
      annotations:
        cert-manager.io/cluster-issuer: self-signed-ca
      ingressClassName: traefik
      hosts:
        - "grafana.home.ssegning"
      tls:
        - secretName: "grafana-home.ssegning-tls"
          hosts:
            - "grafana.home.ssegning"
    sidecar:
      resources:
        limits:
          cpu: 200m
          memory: 500Mi
        requests:
          cpu: 100m
          memory: 200Mi
      enableUniqueFilenames: true
      alerts:
        enabled: true
        label: grafana_alert
        labelValue: "1"
        searchNamespace: "ALL"
        initAlerts: true
      dashboards:
        enabled: true
        label: grafana_dashboard
        labelValue: "1"
        searchNamespace: "ALL"
      datasources:
        enabled: true
        label: grafana_datasource
        labelValue: "1"
        searchNamespace: "ALL"
        initDatasources: true
        isDefaultDatasource: false
        defaultDatasourceEnabled: false
    plugins:
      - grafana-piechart-panel
      - grafana-clock-panel
      - digrich-bubblechart-panel
      - grafana-llm-app
    envFromSecrets:
      - name: keycloak-conf
    grafana.ini:
      server:
        root_url: "https://grafana.home.ssegning"
        enable_gzip: true
      auth:
        disable_login_form: true
      auth.anonymous:
        enabled: "true"
        org_role: "Admin"
      auth.basic:
        enabled: "false"
      auth.generic_oauth:
        enabled: "false"
        name: "SSegning Account"
        auto_login: "true"
        allow_sign_up: "true"
        client_id: '$__env{KEYCLOAK_CLIENT_ID}'
        client_secret: '$__env{KEYCLOAK_CLIENT_SECRET}'
        scopes: "openid email profile offline_access roles"
        email_attribute_path: "email"
        login_attribute_path: "username"
        name_attribute_path: "full_name"
        auth_url: "$__env{KEYCLOAK_ISSUER}/protocol/openid-connect/auth"
        token_url: "$__env{KEYCLOAK_ISSUER}/protocol/openid-connect/token"
        api_url: "$__env{KEYCLOAK_ISSUER}/protocol/openid-connect/userinfo"
        signout_redirect_url: "$__env{KEYCLOAK_ISSUER}/protocol/openid-connect/logout?post_logout_redirect_uri=https%3A%2F%2Fgrafana.home.ssegning%2Flogin"
        role_attribute_path: "contains(grafana_roles[*], 'grafanaadmin') && 'GrafanaAdmin' || contains(grafana_roles[*], 'admin') && 'Admin' || contains(grafana_roles[*], 'editor') && 'Editor' || contains(grafana_roles[*], 'viewer') && 'Viewer' || 'None'"
        allow_assign_grafana_admin: "true"
        use_refresh_token: "true"
        use_pkce: "true"
  
  alertmanager:
    ingress:
      enabled: true
      annotations:
        cert-manager.io/cluster-issuer: self-signed-ca
      ingressClassName: traefik
      hosts:
        - "alertmanager.home.ssegning"
      tls:
        - secretName: "alertmanager-home.ssegning-tls"
          hosts:
            - "alertmanager.home.ssegning"
    alertmanagerSpec:
      logLevel: error
      storage:
        volumeClaimTemplate:
          spec:
            storageClassName: longhorn
            accessModes: [ "ReadWriteOnce" ]
            resources:
              requests:
                storage: 5Gi
    tplConfig: true
    config:
      route:
        receiver: "discord"
        group_by:
          - namespace
        continue: false
        routes:
          - receiver: "discord"
            matchers:
              - alertname="Watchdog"
            continue: false
        group_wait: 30s
        group_interval: 5m
        repeat_interval: 12h
      receivers:
        - name: discord
          discord_configs:
            - webhook_url: "https://discord.com/api/webhooks/1384830588711600170/LBFfxTTABz5vR-Cyv25mXiZD-RXx4wqWWtmMAeAiKjvGypCtvoBTQkELg1q696G8ybwr"

  prometheus:
    ingress:
      enabled: true
      annotations:
        cert-manager.io/cluster-issuer: self-signed-ca
      ingressClassName: traefik
      hosts:
        - "prometheus.home.ssegning"
      tls:
        - secretName: "prometheus-home.ssegning-tls"
          hosts:
            - "prometheus.home.ssegning"
    prometheusSpec:
      logLevel: error
      retention: 10d
      resources:
        requests:
          memory: 400Mi
        limits:
          memory: 800Mi
      storageSpec:
        volumeClaimTemplate:
          spec:
            storageClassName: longhorn
            accessModes: [ "ReadWriteOnce" ]
            resources:
              requests:
                storage: 15Gi

  kubeProxy:
    enabled: false
    
alloy:
  enabled: false
  